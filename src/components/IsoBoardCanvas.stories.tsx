import React from 'react';
import Phaser from 'phaser';
// Ensure every Scene instance has an EventEmitter so `scene.events.on(...)` won't be undefined
;(Phaser.Scene.prototype as any).events = new Phaser.Events.EventEmitter();

import type { Meta, StoryObj } from '@storybook/react';
import { IsoBoardCanvas } from './IsoBoardCanvas';

const meta: Meta<typeof IsoBoardCanvas> = {
  title: 'Components/IsoBoardCanvas',
  component: IsoBoardCanvas,
  tags: ['autodocs'],
  argTypes: {
    boardWidth: {
      control: { type: 'number', min: 10, max: 2000, step: 1 },
      description: 'Largura do tabuleiro em tiles',
    },
    boardHeight: {
      control: { type: 'number', min: 10, max: 2000, step: 1 },
      description: 'Altura do tabuleiro em tiles',
    },
    width: {
      control: 'text',
      description: 'Largura do canvas',
    },
    height: {
      control: 'text',
      description: 'Altura do canvas',
    },
  },
  parameters: {
    layout: 'fullscreen',
    docs: {
      description: {
        component:
          'IsoBoardCanvas √© o componente principal que renderiza um tabuleiro isom√©trico interativo usando Phaser.js com otimiza√ß√µes avan√ßadas e sistema de eventos completo. ' +
          'Utiliza viewport culling, spatial indexing, Level of Detail (LOD) e batch rendering para suportar boards de qualquer tamanho mantendo 60 FPS. ' +
          'Suporte completo a drag & drop de tiles, navega√ß√£o livre da c√¢mera, clique direito para informa√ß√µes, renderiza√ß√£o otimizada autom√°tica e sistema de eventos robusto. ' +
          'Inclui controles avan√ßados: navega√ß√£o por teclado, bookmarks, teleporte suave e auto-seguimento.',
      },
    },
  },
};

export default meta;

type Story = StoryObj<typeof meta>;

/**
 * Board b√°sico sem controles avan√ßados - configura√ß√£o cl√°ssica com eventos.
 */
export const BasicBoard: Story = {
  args: {
    boardWidth: 30,
    boardHeight: 30,
    components: {
      controlsPanel: { enabled: false },
    },
  },
  render: ({ boardWidth, boardHeight, components }) => (
    <div
      style={{
        width: '100vw',
        height: '100vh',
        margin: 0,
        padding: 0,
        overflow: 'hidden',
        position: 'relative',
      }}
    >
      <IsoBoardCanvas 
        boardWidth={boardWidth} 
        boardHeight={boardHeight}
        components={components}
        onTilePlaced={(event) => console.log('üî∑ Tile colocado:', event)}
        onTileRemoved={(event) => console.log('üóëÔ∏è Tile removido:', event)}
        onDragStart={(event) => console.log('üéØ Drag iniciado:', event)}
        onDragEnd={(event) => console.log('‚úÖ Drag finalizado:', event)}
        onBoardInitialized={(event) => console.log('üéÆ Board inicializado:', event)}
      />
      
      <div
        style={{
          position: 'absolute',
          top: '10px',
          left: '10px',
          backgroundColor: 'rgba(0, 0, 0, 0.8)',
          color: 'white',
          padding: '12px',
          borderRadius: '6px',
          fontSize: '12px',
          maxWidth: '250px',
          zIndex: 1000,
        }}
      >
        <h4 style={{ margin: '0 0 6px 0', color: '#00ff00' }}>üéÆ Board B√°sico com Eventos</h4>
        <p style={{ margin: 0, fontSize: '11px' }}>
          Configura√ß√£o cl√°ssica com navega√ß√£o por mouse e eventos:
        </p>
        <ul style={{ margin: '6px 0 0 0', paddingLeft: '14px', fontSize: '11px' }}>
          <li>üñ±Ô∏è Drag para navegar</li>
          <li>üîç Scroll para zoom</li>
          <li>üéØ Clique direito para info</li>
          <li>üì¶ Drag tiles do invent√°rio</li>
          <li>üì° Eventos no console do navegador</li>
        </ul>
      </div>
    </div>
  ),
  parameters: {
    docs: {
      description: {
        story:
          'Board b√°sico (30√ó30) com sistema de eventos ativo. Use o mouse para navegar, scroll para zoom e drag & drop para colocar tiles. Todos os eventos s√£o logados no console do navegador.',
      },
    },
  },
};

/**
 * Board com controles avan√ßados - navega√ß√£o por teclado, bookmarks e teleporte com eventos completos.
 */
export const AdvancedControls: Story = {
  args: {
    boardWidth: 50,
    boardHeight: 50,
    components: {
      controlsPanel: { enabled: true },
    },
  },
  render: ({ boardWidth, boardHeight, components }) => (
    <div
      style={{
        width: '100vw',
        height: '100vh',
        margin: 0,
        padding: 0,
        overflow: 'hidden',
        position: 'relative',
      }}
    >
      <IsoBoardCanvas 
        boardWidth={boardWidth} 
        boardHeight={boardHeight}
        components={components}
        onTileEvent={(event) => console.log('üî∑ Evento de Tile:', event)}
        onDragEvent={(event) => console.log('üéØ Evento de Drag:', event)}
        onCameraEvent={(event) => console.log('üì∑ Evento de C√¢mera:', event)}
        onBoardEvent={(event) => console.log('üéÆ Evento do Board:', event)}
        onPerformanceEvent={(event) => console.log('‚ö° Evento de Performance:', event)}
        onError={(event) => console.error('‚ùå Erro:', event)}
        eventConfig={{
          enableEventLogging: true,
          performanceUpdateInterval: 2000,
        }}
      />
      
      <div
        style={{
          position: 'absolute',
          top: '10px',
          left: '10px',
          backgroundColor: 'rgba(0, 0, 0, 0.9)',
          color: 'white',
          padding: '15px',
          borderRadius: '8px',
          fontSize: '12px',
          maxWidth: '300px',
          zIndex: 1000,
          border: '2px solid #00ff00',
        }}
      >
        <h3 style={{ margin: '0 0 8px 0', color: '#00ff00' }}>üéÆ Controles + Eventos Avan√ßados</h3>
        
        <div style={{ marginBottom: '12px' }}>
          <h4 style={{ margin: '0 0 4px 0', color: '#ffaa00' }}>‚å®Ô∏è Teclado:</h4>
          <ul style={{ margin: 0, paddingLeft: '16px', fontSize: '11px' }}>
            <li><strong>WASD/Setas:</strong> Navega√ß√£o</li>
            <li><strong>Shift + movimento:</strong> R√°pido</li>
            <li><strong>+/-:</strong> Zoom</li>
            <li><strong>C/Space:</strong> Centralizar</li>
            <li><strong>R/0:</strong> Reset zoom</li>
          </ul>
        </div>

        <div style={{ marginBottom: '12px' }}>
          <h4 style={{ margin: '0 0 4px 0', color: '#ffaa00' }}>üì° Sistema de Eventos:</h4>
          <ul style={{ margin: 0, paddingLeft: '16px', fontSize: '11px' }}>
            <li>Eventos agregados por categoria</li>
            <li>Performance monitoring ativo</li>
            <li>Logging autom√°tico ativado</li>
            <li>Tratamento de erros robusto</li>
          </ul>
        </div>

        <p style={{ margin: 0, fontSize: '10px', color: '#aaffaa' }}>
          ‚ú® Use o painel √† direita + verifique o console para ver os eventos!
        </p>
      </div>
    </div>
  ),
  parameters: {
    docs: {
      description: {
        story:
          'üéÆ **Board com Controles + Eventos Avan√ßados:** Sistema completo de navega√ß√£o por teclado, bookmarks, teleporte suave, auto-seguimento e monitoramento de eventos em tempo real. ' +
          'Use WASD para navegar, +/- para zoom, C para centralizar. Eventos s√£o logados no console por categoria.',
      },
    },
  },
};

/**
 * Board pequeno otimizado - 50x50 tiles com eventos de performance.
 */
export const SmallOptimized: Story = {
  args: {
    boardWidth: 50,
    boardHeight: 50,
    components: {
      controlsPanel: { enabled: false },
      realtimeDisplay: { enabled: true },
    },
  },
  render: ({ boardWidth, boardHeight, components }) => (
    <div
      style={{
        width: '100vw',
        height: '100vh',
        margin: 0,
        padding: 0,
        overflow: 'hidden',
        position: 'relative',
      }}
    >
      <IsoBoardCanvas 
        boardWidth={boardWidth} 
        boardHeight={boardHeight}
        components={components}
        onPerformanceUpdate={(event) => {
          console.log('‚ö° Performance Update:', {
            timestamp: event.timestamp,
            frameRate: event.frameRate,
            renderTime: event.renderTime,
            tileCount: event.tileCount,
            visibleTileCount: event.visibleTileCount,
            memoryUsage: event.memoryUsage,
            metrics: event.metrics,
          });
        }}
        onPerformanceWarning={(event) => {
          console.warn('‚ö†Ô∏è Performance Warning:', event);
        }}
        eventConfig={{
          enablePerformanceEvents: true,
          performanceUpdateInterval: 1000,
          performanceWarningThresholds: {
            minFps: 45,
            maxMemoryMB: 200,
            maxRenderTimeMs: 20,
            maxTileCount: 5000,
          },
        }}
      />
      
      <div
        style={{
          position: 'absolute',
          top: '10px',
          right: '10px',
          backgroundColor: 'rgba(0, 0, 0, 0.8)',
          color: 'white',
          padding: '12px',
          borderRadius: '6px',
          fontSize: '12px',
          maxWidth: '250px',
          zIndex: 1000,
        }}
      >
        <h4 style={{ margin: '0 0 6px 0', color: '#00ff00' }}>üöÄ Performance + Eventos</h4>
        <ul style={{ margin: 0, paddingLeft: '14px', fontSize: '11px' }}>
          <li>‚úÖ Viewport Culling</li>
          <li>‚úÖ Spatial Indexing</li>
          <li>‚úÖ Batch Rendering</li>
          <li>‚úÖ Cache Inteligente</li>
          <li>‚úÖ Performance Monitoring</li>
          <li>‚úÖ Display em Tempo Real</li>
        </ul>
        <p style={{ margin: '6px 0 0 0', fontSize: '10px' }}>
          {(boardWidth * boardHeight).toLocaleString()} tiles com eventos de performance
        </p>
      </div>
    </div>
  ),
  parameters: {
    docs: {
      description: {
        story:
          'Board pequeno (50√ó50 = 2.500 tiles) com monitoramento de performance ativo e display em tempo real. ' +
          'Eventos de performance s√£o emitidos a cada segundo com m√©tricas detalhadas.',
      },
    },
  },
};

/**
 * Board m√©dio com eventos completos - demonstra√ß√£o da combina√ß√£o de otimiza√ß√µes e sistema de eventos.
 */
export const MediumWithEvents: Story = {
  args: {
    boardWidth: 100,
    boardHeight: 100,
    components: {
      controlsPanel: { enabled: true },
      realtimeDisplay: { enabled: true },
    },
  },
  render: ({ boardWidth, boardHeight, components }) => {
    const [eventCount, setEventCount] = React.useState(0);
    const [lastEvent, setLastEvent] = React.useState<string>('Nenhum evento ainda');
    
    const handleEvent = React.useCallback((event: any) => {
      setEventCount(prev => prev + 1);
      setLastEvent(`${event.type} - ${new Date().toLocaleTimeString()}`);
      console.log('üì° Evento capturado:', event);
    }, []);

    return (
      <div
        style={{
          width: '100vw',
          height: '100vh',
          margin: 0,
          padding: 0,
          overflow: 'hidden',
          position: 'relative',
        }}
      >
        <IsoBoardCanvas 
          boardWidth={boardWidth} 
          boardHeight={boardHeight}
          components={components}
          onEvent={handleEvent}
          eventConfig={{
            enableEventLogging: true,
            enableTileEvents: true,
            enableDragEvents: true,
            enableCameraEvents: true,
            enableBoardEvents: true,
            enablePerformanceEvents: true,
            performanceUpdateInterval: 3000,
          }}
        />
        
        <div
          style={{
            position: 'absolute',
            top: '10px',
            left: '10px',
            backgroundColor: 'rgba(0, 0, 0, 0.8)',
            color: 'white',
            padding: '12px',
            borderRadius: '6px',
            fontSize: '12px',
            maxWidth: '250px',
            zIndex: 1000,
          }}
        >
          <h4 style={{ margin: '0 0 6px 0', color: '#ffaa00' }}>üì° Monitor de Eventos</h4>
          <p style={{ margin: '0 0 6px 0', fontSize: '11px' }}>
            <strong>{(boardWidth * boardHeight).toLocaleString()}</strong> tiles totais
          </p>
          <div style={{ marginBottom: '8px' }}>
            <strong>Eventos capturados:</strong> {eventCount}
          </div>
          <div style={{ fontSize: '10px', color: '#aaffaa' }}>
            <strong>√öltimo:</strong> {lastEvent}
          </div>
          <ul style={{ margin: '6px 0 0 0', paddingLeft: '14px', fontSize: '11px' }}>
            <li>üéØ S√≥ renderiza ~200-300 vis√≠veis</li>
            <li>üöÄ Level of Detail autom√°tico</li>
            <li>üíæ Cache inteligente ativo</li>
            <li>üîÑ 60 FPS garantidos</li>
            <li>üì° Todos os eventos monitoreados</li>
          </ul>
        </div>
      </div>
    );
  },
  parameters: {
    docs: {
      description: {
        story:
          'Board m√©dio (100√ó100 = 10.000 tiles) combinando otimiza√ß√µes de performance com sistema de eventos completo. ' +
          'Monitor em tempo real exibe contagem de eventos e √∫ltimo evento capturado.',
      },
    },
  },
};

/**
 * Board gigantesco otimizado - 1000x1000 tiles (1 MILH√ÉO!) com sistema de eventos robusto.
 */
export const GigantOptimized: Story = {
  args: {
    boardWidth: 1000,
    boardHeight: 1000,
    components: {
      controlsPanel: { enabled: true },
      realtimeDisplay: { enabled: true },
    },
  },
  render: ({ boardWidth, boardHeight, components }) => (
    <div
      style={{
        width: '100vw',
        height: '100vh',
        margin: 0,
        padding: 0,
        overflow: 'hidden',
        position: 'relative',
      }}
    >
      <IsoBoardCanvas 
        boardWidth={boardWidth} 
        boardHeight={boardHeight}
        components={components}
        onPerformanceEvent={(event) => {
          if (event.type === 'performance-warning') {
            console.warn('‚ö†Ô∏è Performance Warning em board gigantesco:', event);
          }
        }}
        onError={(event) => {
          console.error('‚ùå Erro em board gigantesco:', event);
        }}
        eventConfig={{
          enablePerformanceEvents: true,
          enableErrorEvents: true,
          performanceUpdateInterval: 5000,
          performanceWarningThresholds: {
            minFps: 30,
            maxMemoryMB: 1000,
            maxRenderTimeMs: 30,
            maxTileCount: 1000000,
          },
          throttleMs: {
            drag: 32, // Menos responsivo em boards gigantes
            camera: 32,
            performance: 5000,
          },
        }}
      />
      
      <div
        style={{
          position: 'absolute',
          top: '10px',
          left: '10px',
          backgroundColor: 'rgba(0, 0, 0, 0.9)',
          color: 'white',
          padding: '16px',
          borderRadius: '8px',
          fontSize: '14px',
          maxWidth: '320px',
          zIndex: 1000,
          border: '2px solid #00ff00',
        }}
      >
        <h3 style={{ margin: '0 0 8px 0', color: '#00ff00' }}>üî• BOARD GIGANTESCO + EVENTOS</h3>
        <p style={{ margin: '0 0 8px 0' }}>
          <strong>{boardWidth.toLocaleString()} √ó {boardHeight.toLocaleString()}</strong> tiles
          <br />
          <strong style={{ color: '#ffff00' }}>{(boardWidth * boardHeight).toLocaleString()}</strong> tiles totais!
        </p>
        
        <div style={{ fontSize: '12px' }}>
          <h4 style={{ margin: '8px 0 4px 0', color: '#ffaa00' }}>üöÄ Otimiza√ß√µes Extremas:</h4>
          <ul style={{ margin: 0, paddingLeft: '16px' }}>
            <li>‚úÖ Viewport Culling Ultra-R√°pido</li>
            <li>‚úÖ Spatial Index (chunks 64√ó64)</li>
            <li>‚úÖ LOD com 5 n√≠veis autom√°ticos</li>
            <li>‚úÖ Batch Rendering por cor</li>
            <li>‚úÖ Cache viewport inteligente</li>
            <li>‚úÖ Throttling de re-renderiza√ß√£o</li>
          </ul>
          
          <h4 style={{ margin: '8px 0 4px 0', color: '#ffaa00' }}>üì° Sistema de Eventos:</h4>
          <ul style={{ margin: 0, paddingLeft: '16px' }}>
            <li>‚úÖ Performance monitoring robusto</li>
            <li>‚úÖ Throttling inteligente de eventos</li>
            <li>‚úÖ Detec√ß√£o de warnings autom√°tica</li>
            <li>‚úÖ Error handling avan√ßado</li>
          </ul>
          
          <h4 style={{ margin: '8px 0 4px 0', color: '#ffaa00' }}>üìä Performance:</h4>
          <p style={{ margin: 0, fontSize: '11px', color: '#aaffaa' }}>
            <strong>60 FPS s√≥lidos</strong> renderizando apenas ~300-500 tiles vis√≠veis
            <br />
            Eventos otimizados para boards extremos
          </p>
        </div>
      </div>
    </div>
  ),
  parameters: {
    docs: {
      description: {
        story:
          'üî• **BOARD EXTREMO COM EVENTOS OTIMIZADOS:** 1000√ó1000 tiles (1 MILH√ÉO de tiles!) rodando a 60 FPS com sistema de eventos completo! ' +
          '\n\n' +
          '**Sistema Completo:**\n' +
          '- **Performance Ultra-Otimizada**: Renderiza 0.03-0.05% dos tiles (300-500 de 1 milh√£o)\n' +
          '- **Eventos Inteligentes**: Throttling autom√°tico, performance monitoring, error handling\n' +
          '- **Controles Profissionais**: Navega√ß√£o por teclado, bookmarks, teleporte, auto-seguimento\n' +
          '- **Experi√™ncia Fluida**: 60 FPS consistentes mesmo com milh√µes de tiles\n' +
          '\n\n' +
          '**Performance Monitoring:**\n' +
          '1. üìä M√©tricas de performance a cada 5 segundos\n' +
          '2. ‚ö†Ô∏è Warnings autom√°ticos se performance degradar\n' +
          '3. üö® Error handling robusto para casos extremos\n' +
          '4. ‚ö° Throttling inteligente de eventos de drag/camera',
      },
    },
  },
};

/**
 * Board ultra-gigante - teste de stress para 2000x2000 tiles (4 MILH√ïES!) com eventos throttled.
 */
export const UltraGigantOptimized: Story = {
  args: {
    boardWidth: 2000,
    boardHeight: 2000,
    components: {
      controlsPanel: { enabled: true },
      realtimeDisplay: { enabled: false }, // Desabilitado para performance m√°xima
    },
  },
  render: ({ boardWidth, boardHeight, components }) => (
    <div
      style={{
        width: '100vw',
        height: '100vh',
        margin: 0,
        padding: 0,
        overflow: 'hidden',
        position: 'relative',
      }}
    >
      <IsoBoardCanvas 
        boardWidth={boardWidth} 
        boardHeight={boardHeight}
        components={components}
        onPerformanceWarning={(event) => {
          console.warn('üö® Performance Critical em board ultra-gigante:', event);
        }}
        onError={(event) => {
          console.error('üí• Erro cr√≠tico:', event);
        }}
        eventConfig={{
          enablePerformanceEvents: true,
          enableErrorEvents: true,
          enableTileEvents: false, // Desabilitado para performance m√°xima
          enableDragEvents: true,
          enableCameraEvents: false, // Reduzido para performance
          performanceUpdateInterval: 10000, // 10 segundos
          performanceWarningThresholds: {
            minFps: 20, // Mais tolerante
            maxMemoryMB: 2000,
            maxRenderTimeMs: 50,
            maxTileCount: 4000000,
          },
          throttleMs: {
            drag: 64, // Muito throttled
            camera: 64,
            performance: 10000,
          },
        }}
      />
      
      <div
        style={{
          position: 'absolute',
          top: '10px',
          left: '10px',
          backgroundColor: 'rgba(0, 0, 0, 0.95)',
          color: 'white',
          padding: '20px',
          borderRadius: '10px',
          fontSize: '14px',
          maxWidth: '350px',
          zIndex: 1000,
          border: '3px solid #ff0000',
        }}
      >
        <h2 style={{ margin: '0 0 10px 0', color: '#ff3333' }}>üí• TESTE DE STRESS EXTREMO</h2>
        <p style={{ margin: '0 0 10px 0' }}>
          <strong style={{ color: '#ffff00' }}>{(boardWidth * boardHeight).toLocaleString()}</strong> tiles
          <br />
          <strong style={{ color: '#ff6666' }}>4 MILH√ïES DE TILES!</strong>
        </p>
        
        <div style={{ fontSize: '12px' }}>
          <h4 style={{ margin: '8px 0 4px 0', color: '#ffaa00' }}>‚ö° Otimiza√ß√µes Extremas:</h4>
          <ul style={{ margin: 0, paddingLeft: '16px' }}>
            <li>üî• Performance m√°xima</li>
            <li>üéØ Eventos cr√≠ticos apenas</li>
            <li>‚ö†Ô∏è Throttling agressivo</li>
            <li>üö® Monitoring de emerg√™ncia</li>
          </ul>
          
          <p style={{ margin: '8px 0 0 0', fontSize: '11px', color: '#ffaaaa' }}>
            ‚ö†Ô∏è <strong>Nota:</strong> Este √© um teste de stress extremo.
            <br />
            Sistema otimizado para manter estabilidade.
          </p>
        </div>
      </div>
    </div>
  ),
  parameters: {
    docs: {
      description: {
        story:
          'üí• **TESTE DE STRESS ULTRA-EXTREMO:** 2000√ó2000 tiles (4 MILH√ïES de tiles!) ' +
          'com sistema de eventos otimizado para performance m√°xima. Eventos n√£o-cr√≠ticos s√£o desabilitados, ' +
          'throttling agressivo ativo e monitoring de emerg√™ncia para detectar problemas.',
      },
    },
  },
};
